--------------------------------------------------------
--  File created - Thursday-September-06-2018   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence BUYERS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CHINMAY"."BUYERS_SEQ"  MINVALUE 100 MAXVALUE 999 INCREMENT BY 1 START WITH 340 CACHE 20 NOORDER  NOCYCLE  NOPARTITION ;
--------------------------------------------------------
--  DDL for Sequence PRODUCTS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CHINMAY"."PRODUCTS_SEQ"  MINVALUE 9000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 9100 CACHE 20 NOORDER  NOCYCLE  NOPARTITION ;
--------------------------------------------------------
--  DDL for Sequence PURCHASEITEM_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CHINMAY"."PURCHASEITEM_SEQ"  MINVALUE 0 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 140 CACHE 20 NOORDER  NOCYCLE  NOPARTITION ;
--------------------------------------------------------
--  DDL for Sequence PURCHASEORDERS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CHINMAY"."PURCHASEORDERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 121 CACHE 20 NOORDER  NOCYCLE  NOPARTITION ;
--------------------------------------------------------
--  DDL for Sequence SALESITEM_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CHINMAY"."SALESITEM_SEQ"  MINVALUE 0 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 160 CACHE 20 NOORDER  NOCYCLE  NOPARTITION ;
--------------------------------------------------------
--  DDL for Sequence SALESORDERS_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "CHINMAY"."SALESORDERS_SEQ1"  MINVALUE 800 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 960 CACHE 20 NOORDER  NOCYCLE  NOPARTITION ;
--------------------------------------------------------
--  DDL for Sequence SUPPLIERS_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "CHINMAY"."SUPPLIERS_SEQ1"  MINVALUE 0 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 80 CACHE 20 NOORDER  NOCYCLE  NOPARTITION ;
--------------------------------------------------------
--  DDL for Sequence USERS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CHINMAY"."USERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 44 CACHE 20 NOORDER  NOCYCLE  NOPARTITION ;
--------------------------------------------------------
--  DDL for Table BUYERS
--------------------------------------------------------

  CREATE TABLE "CHINMAY"."BUYERS" 
   (	"BUYER_ID" NUMBER(*,0), 
	"BUYER_NAME" VARCHAR2(20 BYTE), 
	"BUYER_ADDRESS" VARCHAR2(50 BYTE), 
	"BUYER_PHONE_NO" VARCHAR2(20 BYTE), 
	"BUYER_EMAIL_ID" VARCHAR2(50 BYTE) DEFAULT NULL
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY" ;
--------------------------------------------------------
--  DDL for Table INVENTORY
--------------------------------------------------------

  CREATE TABLE "CHINMAY"."INVENTORY" 
   (	"INV_PRODUCT_ID" NUMBER(8,0), 
	"PRODUCT_QUANTITY" NUMBER(6,0), 
	"MIN_STOCK_LEVEL" NUMBER(6,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY" ;
--------------------------------------------------------
--  DDL for Table PRODUCTS
--------------------------------------------------------

  CREATE TABLE "CHINMAY"."PRODUCTS" 
   (	"PRODUCT_ID" NUMBER(5,0), 
	"PRODUCT_NAME" VARCHAR2(30 BYTE), 
	"PRODUCT_DESC" VARCHAR2(200 BYTE), 
	"PRODUCT_PRICE" NUMBER(10,0), 
	"IMG_SRC" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY" ;
--------------------------------------------------------
--  DDL for Table PRODUCT_TYPE
--------------------------------------------------------

  CREATE TABLE "CHINMAY"."PRODUCT_TYPE" 
   (	"PT_PRODUCT_ID" NUMBER(8,0), 
	"PRODUCT_TYPE" VARCHAR2(20 BYTE), 
	"MARGIN_PER" NUMBER(4,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY" ;
--------------------------------------------------------
--  DDL for Table PURCHASEITEM
--------------------------------------------------------

  CREATE TABLE "CHINMAY"."PURCHASEITEM" 
   (	"PI_PURCHASE_ID" NUMBER(3,0), 
	"PI_PRODUCT_ID" NUMBER(5,0), 
	"PI_QUANTITY" NUMBER(6,0), 
	"PI_UNIT_PRICE" NUMBER(6,0), 
	"ITEM_TOTAL_PRICE" NUMBER(20,0) GENERATED ALWAYS AS ("PI_QUANTITY"*"PI_UNIT_PRICE") VIRTUAL , 
	"PI_PURCHITEM_ID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY" ;
--------------------------------------------------------
--  DDL for Table PURCHASEORDERS
--------------------------------------------------------

  CREATE TABLE "CHINMAY"."PURCHASEORDERS" 
   (	"PURCHASEORD_ID" NUMBER(3,0), 
	"PO_SUPPLIER_ID" NUMBER(3,0), 
	"PURCHPRICE" NUMBER(10,0), 
	"PURCHDATE" DATE, 
	"EXPECTED_DELIVERYDATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY" ;
--------------------------------------------------------
--  DDL for Table SALESITEM
--------------------------------------------------------

  CREATE TABLE "CHINMAY"."SALESITEM" 
   (	"SI_ORDER_ID" NUMBER(3,0), 
	"SI_PRODUCT_ID" NUMBER(5,0), 
	"SI_QUANTITY" NUMBER(6,0), 
	"SI_UNIT_PRICE" NUMBER(6,0), 
	"SI_DISCOUNTED_PRICE" NUMBER(6,0), 
	"ITEM_TOTAL_PRICE" NUMBER(20,0) GENERATED ALWAYS AS ("SI_QUANTITY"*"SI_UNIT_PRICE") VIRTUAL , 
	"SI_SALEITEM_ID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY" ;
--------------------------------------------------------
--  DDL for Table SALESORDERS
--------------------------------------------------------

  CREATE TABLE "CHINMAY"."SALESORDERS" 
   (	"SALESORD_ID" NUMBER(3,0), 
	"SO_BUYER_ID" NUMBER(3,0), 
	"SALEPRICE" NUMBER(10,0), 
	"SALEDATE" DATE, 
	"PAYMENT_STATUS" VARCHAR2(10 BYTE), 
	"ORDER_STATUS" VARCHAR2(20 BYTE), 
	"EXP_DELIVERY_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY" ;
--------------------------------------------------------
--  DDL for Table SUPPLIERS
--------------------------------------------------------

  CREATE TABLE "CHINMAY"."SUPPLIERS" 
   (	"SUPPLIER_ID" NUMBER(3,0), 
	"SUPPLIER_NAME" VARCHAR2(20 BYTE), 
	"SUPPLIER_PHONE_NO" VARCHAR2(20 BYTE) DEFAULT NULL
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY" ;
--------------------------------------------------------
--  DDL for Table USERS
--------------------------------------------------------

  CREATE TABLE "CHINMAY"."USERS" 
   (	"USER_ID" NUMBER(5,0), 
	"USERNAME" VARCHAR2(15 BYTE), 
	"PASSWORD" VARCHAR2(15 BYTE), 
	"ROLE_ID" NUMBER(2,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY" ;
REM INSERTING into CHINMAY.BUYERS
SET DEFINE OFF;
Insert into CHINMAY.BUYERS (BUYER_ID,BUYER_NAME,BUYER_ADDRESS,BUYER_PHONE_NO,BUYER_EMAIL_ID) values (140,'Suvarna','Koparkhairane','8723827382','s@gmail.com');
Insert into CHINMAY.BUYERS (BUYER_ID,BUYER_NAME,BUYER_ADDRESS,BUYER_PHONE_NO,BUYER_EMAIL_ID) values (180,'Tarun','Gurgaon','9872876622','t_m@gmail.com');
Insert into CHINMAY.BUYERS (BUYER_ID,BUYER_NAME,BUYER_ADDRESS,BUYER_PHONE_NO,BUYER_EMAIL_ID) values (125,'Chinmay','Thane','9029982351','chinmay@gmail.com');
Insert into CHINMAY.BUYERS (BUYER_ID,BUYER_NAME,BUYER_ADDRESS,BUYER_PHONE_NO,BUYER_EMAIL_ID) values (160,'Amit','Pune','9828728728','amitmhetre@gmail.com');
Insert into CHINMAY.BUYERS (BUYER_ID,BUYER_NAME,BUYER_ADDRESS,BUYER_PHONE_NO,BUYER_EMAIL_ID) values (309,'Renuka','Belapur','8273823782','renuka@gmail.com');
Insert into CHINMAY.BUYERS (BUYER_ID,BUYER_NAME,BUYER_ADDRESS,BUYER_PHONE_NO,BUYER_EMAIL_ID) values (137,'Rohit','Thane','9823982922','rohit@gmail.com');
Insert into CHINMAY.BUYERS (BUYER_ID,BUYER_NAME,BUYER_ADDRESS,BUYER_PHONE_NO,BUYER_EMAIL_ID) values (320,'Taran','Seawoods','9289282892','taran@gmail.com');
REM INSERTING into CHINMAY.INVENTORY
SET DEFINE OFF;
Insert into CHINMAY.INVENTORY (INV_PRODUCT_ID,PRODUCT_QUANTITY,MIN_STOCK_LEVEL) values (9000,16,5);
Insert into CHINMAY.INVENTORY (INV_PRODUCT_ID,PRODUCT_QUANTITY,MIN_STOCK_LEVEL) values (9020,17,2);
Insert into CHINMAY.INVENTORY (INV_PRODUCT_ID,PRODUCT_QUANTITY,MIN_STOCK_LEVEL) values (9001,19,20);
Insert into CHINMAY.INVENTORY (INV_PRODUCT_ID,PRODUCT_QUANTITY,MIN_STOCK_LEVEL) values (9003,8,10);
REM INSERTING into CHINMAY.PRODUCTS
SET DEFINE OFF;
Insert into CHINMAY.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_DESC,PRODUCT_PRICE,IMG_SRC) values (9080,'The Time Paradox','Book that Changes one''s perspective towards Life',500,'timeparadox.png');
Insert into CHINMAY.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_DESC,PRODUCT_PRICE,IMG_SRC) values (9020,'iphone 6 plus','Apple Iphone',70000,'iphone6s.png');
Insert into CHINMAY.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_DESC,PRODUCT_PRICE,IMG_SRC) values (9000,'Oneplus 6','Mobile Phone',35000,'oneplus_6.png');
Insert into CHINMAY.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_DESC,PRODUCT_PRICE,IMG_SRC) values (9001,'Wolverine-Hoodie','Xmen Wolverine',799,'wolverine.png');
Insert into CHINMAY.PRODUCTS (PRODUCT_ID,PRODUCT_NAME,PRODUCT_DESC,PRODUCT_PRICE,IMG_SRC) values (9003,'SAMSUNG LCD TV','TV',53000,'samsung_tv.png');
REM INSERTING into CHINMAY.PRODUCT_TYPE
SET DEFINE OFF;
Insert into CHINMAY.PRODUCT_TYPE (PT_PRODUCT_ID,PRODUCT_TYPE,MARGIN_PER) values (9080,'BOOKS',2);
Insert into CHINMAY.PRODUCT_TYPE (PT_PRODUCT_ID,PRODUCT_TYPE,MARGIN_PER) values (9000,'MOBILES',10);
Insert into CHINMAY.PRODUCT_TYPE (PT_PRODUCT_ID,PRODUCT_TYPE,MARGIN_PER) values (9001,'CLOTHES',5);
Insert into CHINMAY.PRODUCT_TYPE (PT_PRODUCT_ID,PRODUCT_TYPE,MARGIN_PER) values (9003,'ELECTRONICS',2);
Insert into CHINMAY.PRODUCT_TYPE (PT_PRODUCT_ID,PRODUCT_TYPE,MARGIN_PER) values (9020,'MOBILES',2);
REM INSERTING into CHINMAY.PURCHASEITEM
SET DEFINE OFF;
Insert into CHINMAY.PURCHASEITEM (PI_PURCHASE_ID,PI_PRODUCT_ID,PI_QUANTITY,PI_UNIT_PRICE,ITEM_TOTAL_PRICE,PI_PURCHITEM_ID) values (38,9020,3,70000,210000,78);
Insert into CHINMAY.PURCHASEITEM (PI_PURCHASE_ID,PI_PRODUCT_ID,PI_QUANTITY,PI_UNIT_PRICE,ITEM_TOTAL_PRICE,PI_PURCHITEM_ID) values (81,9003,2,53000,106000,100);
Insert into CHINMAY.PURCHASEITEM (PI_PURCHASE_ID,PI_PRODUCT_ID,PI_QUANTITY,PI_UNIT_PRICE,ITEM_TOTAL_PRICE,PI_PURCHITEM_ID) values (103,9000,2,35000,70000,121);
Insert into CHINMAY.PURCHASEITEM (PI_PURCHASE_ID,PI_PRODUCT_ID,PI_QUANTITY,PI_UNIT_PRICE,ITEM_TOTAL_PRICE,PI_PURCHITEM_ID) values (38,9001,5,799,3995,79);
Insert into CHINMAY.PURCHASEITEM (PI_PURCHASE_ID,PI_PRODUCT_ID,PI_QUANTITY,PI_UNIT_PRICE,ITEM_TOTAL_PRICE,PI_PURCHITEM_ID) values (102,9020,1,70000,70000,120);
Insert into CHINMAY.PURCHASEITEM (PI_PURCHASE_ID,PI_PRODUCT_ID,PI_QUANTITY,PI_UNIT_PRICE,ITEM_TOTAL_PRICE,PI_PURCHITEM_ID) values (112,9000,1,35000,35000,125);
Insert into CHINMAY.PURCHASEITEM (PI_PURCHASE_ID,PI_PRODUCT_ID,PI_QUANTITY,PI_UNIT_PRICE,ITEM_TOTAL_PRICE,PI_PURCHITEM_ID) values (41,9020,2,70000,140000,82);
Insert into CHINMAY.PURCHASEITEM (PI_PURCHASE_ID,PI_PRODUCT_ID,PI_QUANTITY,PI_UNIT_PRICE,ITEM_TOTAL_PRICE,PI_PURCHITEM_ID) values (104,9003,1,53000,53000,123);
Insert into CHINMAY.PURCHASEITEM (PI_PURCHASE_ID,PI_PRODUCT_ID,PI_QUANTITY,PI_UNIT_PRICE,ITEM_TOTAL_PRICE,PI_PURCHITEM_ID) values (104,9000,1,35000,35000,122);
Insert into CHINMAY.PURCHASEITEM (PI_PURCHASE_ID,PI_PRODUCT_ID,PI_QUANTITY,PI_UNIT_PRICE,ITEM_TOTAL_PRICE,PI_PURCHITEM_ID) values (111,9020,1,70000,70000,124);
REM INSERTING into CHINMAY.PURCHASEORDERS
SET DEFINE OFF;
Insert into CHINMAY.PURCHASEORDERS (PURCHASEORD_ID,PO_SUPPLIER_ID,PURCHPRICE,PURCHDATE,EXPECTED_DELIVERYDATE) values (102,21,70000,to_date('31-08-18','DD-MM-RR'),to_date('03-09-18','DD-MM-RR'));
Insert into CHINMAY.PURCHASEORDERS (PURCHASEORD_ID,PO_SUPPLIER_ID,PURCHPRICE,PURCHDATE,EXPECTED_DELIVERYDATE) values (38,21,213995,to_date('07-08-18','DD-MM-RR'),to_date('09-08-18','DD-MM-RR'));
Insert into CHINMAY.PURCHASEORDERS (PURCHASEORD_ID,PO_SUPPLIER_ID,PURCHPRICE,PURCHDATE,EXPECTED_DELIVERYDATE) values (81,21,106000,to_date('27-08-18','DD-MM-RR'),to_date('28-09-18','DD-MM-RR'));
Insert into CHINMAY.PURCHASEORDERS (PURCHASEORD_ID,PO_SUPPLIER_ID,PURCHPRICE,PURCHDATE,EXPECTED_DELIVERYDATE) values (103,21,70000,to_date('31-08-18','DD-MM-RR'),to_date('03-09-18','DD-MM-RR'));
Insert into CHINMAY.PURCHASEORDERS (PURCHASEORD_ID,PO_SUPPLIER_ID,PURCHPRICE,PURCHDATE,EXPECTED_DELIVERYDATE) values (41,21,140000,to_date('07-08-18','DD-MM-RR'),to_date('09-08-18','DD-MM-RR'));
Insert into CHINMAY.PURCHASEORDERS (PURCHASEORD_ID,PO_SUPPLIER_ID,PURCHPRICE,PURCHDATE,EXPECTED_DELIVERYDATE) values (104,21,88000,to_date('31-08-18','DD-MM-RR'),to_date('04-09-18','DD-MM-RR'));
Insert into CHINMAY.PURCHASEORDERS (PURCHASEORD_ID,PO_SUPPLIER_ID,PURCHPRICE,PURCHDATE,EXPECTED_DELIVERYDATE) values (111,22,70000,to_date('31-08-18','DD-MM-RR'),to_date('04-09-18','DD-MM-RR'));
Insert into CHINMAY.PURCHASEORDERS (PURCHASEORD_ID,PO_SUPPLIER_ID,PURCHPRICE,PURCHDATE,EXPECTED_DELIVERYDATE) values (112,22,35000,to_date('31-08-18','DD-MM-RR'),to_date('05-09-18','DD-MM-RR'));
REM INSERTING into CHINMAY.SALESITEM
SET DEFINE OFF;
Insert into CHINMAY.SALESITEM (SI_ORDER_ID,SI_PRODUCT_ID,SI_QUANTITY,SI_UNIT_PRICE,SI_DISCOUNTED_PRICE,ITEM_TOTAL_PRICE,SI_SALEITEM_ID) values (940,9020,1,70000,68600,70000,140);
Insert into CHINMAY.SALESITEM (SI_ORDER_ID,SI_PRODUCT_ID,SI_QUANTITY,SI_UNIT_PRICE,SI_DISCOUNTED_PRICE,ITEM_TOTAL_PRICE,SI_SALEITEM_ID) values (927,9001,1,799,759,799,124);
Insert into CHINMAY.SALESITEM (SI_ORDER_ID,SI_PRODUCT_ID,SI_QUANTITY,SI_UNIT_PRICE,SI_DISCOUNTED_PRICE,ITEM_TOTAL_PRICE,SI_SALEITEM_ID) values (907,9020,1,70000,68600,70000,111);
Insert into CHINMAY.SALESITEM (SI_ORDER_ID,SI_PRODUCT_ID,SI_QUANTITY,SI_UNIT_PRICE,SI_DISCOUNTED_PRICE,ITEM_TOTAL_PRICE,SI_SALEITEM_ID) values (800,9001,2,799,1558,1598,20);
Insert into CHINMAY.SALESITEM (SI_ORDER_ID,SI_PRODUCT_ID,SI_QUANTITY,SI_UNIT_PRICE,SI_DISCOUNTED_PRICE,ITEM_TOTAL_PRICE,SI_SALEITEM_ID) values (927,9000,1,35000,31500,35000,125);
Insert into CHINMAY.SALESITEM (SI_ORDER_ID,SI_PRODUCT_ID,SI_QUANTITY,SI_UNIT_PRICE,SI_DISCOUNTED_PRICE,ITEM_TOTAL_PRICE,SI_SALEITEM_ID) values (941,9000,1,35000,31500,35000,141);
Insert into CHINMAY.SALESITEM (SI_ORDER_ID,SI_PRODUCT_ID,SI_QUANTITY,SI_UNIT_PRICE,SI_DISCOUNTED_PRICE,ITEM_TOTAL_PRICE,SI_SALEITEM_ID) values (800,9000,1,35000,31500,35000,109);
Insert into CHINMAY.SALESITEM (SI_ORDER_ID,SI_PRODUCT_ID,SI_QUANTITY,SI_UNIT_PRICE,SI_DISCOUNTED_PRICE,ITEM_TOTAL_PRICE,SI_SALEITEM_ID) values (800,9000,1,35000,31500,35000,110);
REM INSERTING into CHINMAY.SALESORDERS
SET DEFINE OFF;
Insert into CHINMAY.SALESORDERS (SALESORD_ID,SO_BUYER_ID,SALEPRICE,SALEDATE,PAYMENT_STATUS,ORDER_STATUS,EXP_DELIVERY_DATE) values (800,125,71598,to_date('16-07-18','DD-MM-RR'),'PAID','OUT FOR DELIVERY',to_date('19-07-18','DD-MM-RR'));
Insert into CHINMAY.SALESORDERS (SALESORD_ID,SO_BUYER_ID,SALEPRICE,SALEDATE,PAYMENT_STATUS,ORDER_STATUS,EXP_DELIVERY_DATE) values (927,309,35799,to_date('30-08-18','DD-MM-RR'),'PAID','OUT FOR DELIVERY',to_date('03-09-18','DD-MM-RR'));
Insert into CHINMAY.SALESORDERS (SALESORD_ID,SO_BUYER_ID,SALEPRICE,SALEDATE,PAYMENT_STATUS,ORDER_STATUS,EXP_DELIVERY_DATE) values (907,125,70000,to_date('29-08-18','DD-MM-RR'),'PAID','OUT FOR DELIVERY',to_date('02-09-18','DD-MM-RR'));
Insert into CHINMAY.SALESORDERS (SALESORD_ID,SO_BUYER_ID,SALEPRICE,SALEDATE,PAYMENT_STATUS,ORDER_STATUS,EXP_DELIVERY_DATE) values (940,320,70000,to_date('31-08-18','DD-MM-RR'),'PAID','OUT FOR DELIVERY',to_date('04-09-18','DD-MM-RR'));
Insert into CHINMAY.SALESORDERS (SALESORD_ID,SO_BUYER_ID,SALEPRICE,SALEDATE,PAYMENT_STATUS,ORDER_STATUS,EXP_DELIVERY_DATE) values (941,320,35000,to_date('31-08-18','DD-MM-RR'),'PAID','OUT FOR DELIVERY',to_date('04-09-18','DD-MM-RR'));
REM INSERTING into CHINMAY.SUPPLIERS
SET DEFINE OFF;
Insert into CHINMAY.SUPPLIERS (SUPPLIER_ID,SUPPLIER_NAME,SUPPLIER_PHONE_NO) values (21,'Amazon','190-292-222');
Insert into CHINMAY.SUPPLIERS (SUPPLIER_ID,SUPPLIER_NAME,SUPPLIER_PHONE_NO) values (22,'Flipkart','190-292-233');
Insert into CHINMAY.SUPPLIERS (SUPPLIER_ID,SUPPLIER_NAME,SUPPLIER_PHONE_NO) values (60,'Sunder Enterprises','8273823782');
REM INSERTING into CHINMAY.USERS
SET DEFINE OFF;
Insert into CHINMAY.USERS (USER_ID,USERNAME,PASSWORD,ROLE_ID) values (1,'Administrator','admin',1);
Insert into CHINMAY.USERS (USER_ID,USERNAME,PASSWORD,ROLE_ID) values (125,'Chinmay','buyer',2);
Insert into CHINMAY.USERS (USER_ID,USERNAME,PASSWORD,ROLE_ID) values (3,'Amazon','supplier',3);
Insert into CHINMAY.USERS (USER_ID,USERNAME,PASSWORD,ROLE_ID) values (309,'Renuka','renuka',2);
Insert into CHINMAY.USERS (USER_ID,USERNAME,PASSWORD,ROLE_ID) values (137,'Rohit','buyer',2);
Insert into CHINMAY.USERS (USER_ID,USERNAME,PASSWORD,ROLE_ID) values (160,'Amit','buyer',2);
Insert into CHINMAY.USERS (USER_ID,USERNAME,PASSWORD,ROLE_ID) values (320,'Taran','taran',2);
--------------------------------------------------------
--  DDL for Index SI_SALEITEM_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CHINMAY"."SI_SALEITEM_ID_PK" ON "CHINMAY"."SALESITEM" ("SI_SALEITEM_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY" ;
--------------------------------------------------------
--  DDL for Index SALESORD_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CHINMAY"."SALESORD_ID_PK" ON "CHINMAY"."SALESORDERS" ("SALESORD_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY" ;
--------------------------------------------------------
--  DDL for Index PURCHASEORD_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CHINMAY"."PURCHASEORD_ID_PK" ON "CHINMAY"."PURCHASEORDERS" ("PURCHASEORD_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY" ;
--------------------------------------------------------
--  DDL for Index PI_PURCHITEM_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CHINMAY"."PI_PURCHITEM_ID_PK" ON "CHINMAY"."PURCHASEITEM" ("PI_PURCHITEM_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY" ;
--------------------------------------------------------
--  DDL for Index SUPPLIER_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CHINMAY"."SUPPLIER_ID_PK" ON "CHINMAY"."SUPPLIERS" ("SUPPLIER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY" ;
--------------------------------------------------------
--  DDL for Index PRODUCT_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CHINMAY"."PRODUCT_ID_PK" ON "CHINMAY"."PRODUCTS" ("PRODUCT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY" ;
--------------------------------------------------------
--  DDL for Index INV_PRODUCT_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CHINMAY"."INV_PRODUCT_ID_PK" ON "CHINMAY"."INVENTORY" ("INV_PRODUCT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY" ;
--------------------------------------------------------
--  DDL for Index USER_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CHINMAY"."USER_ID_PK" ON "CHINMAY"."USERS" ("USER_ID", "USERNAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY" ;
--------------------------------------------------------
--  DDL for Index BUYER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CHINMAY"."BUYER_PK" ON "CHINMAY"."BUYERS" ("BUYER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY" ;
--------------------------------------------------------
--  Constraints for Table BUYERS
--------------------------------------------------------

  ALTER TABLE "CHINMAY"."BUYERS" ADD CONSTRAINT "BUYER_PK" PRIMARY KEY ("BUYER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY"  ENABLE;
  ALTER TABLE "CHINMAY"."BUYERS" MODIFY ("BUYER_PHONE_NO" NOT NULL ENABLE);
  ALTER TABLE "CHINMAY"."BUYERS" MODIFY ("BUYER_ADDRESS" NOT NULL ENABLE);
  ALTER TABLE "CHINMAY"."BUYERS" MODIFY ("BUYER_NAME" NOT NULL ENABLE);
  ALTER TABLE "CHINMAY"."BUYERS" MODIFY ("BUYER_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PRODUCT_TYPE
--------------------------------------------------------

  ALTER TABLE "CHINMAY"."PRODUCT_TYPE" ADD CONSTRAINT "PRODUCT_TYPE_CONSTRAINT" CHECK (product_type IN('BOOKS','MOBILES','ELECTRONICS','CLOTHES')) ENABLE;
  ALTER TABLE "CHINMAY"."PRODUCT_TYPE" MODIFY ("PRODUCT_TYPE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SALESITEM
--------------------------------------------------------

  ALTER TABLE "CHINMAY"."SALESITEM" ADD CONSTRAINT "SI_SALEITEM_ID_PK" PRIMARY KEY ("SI_SALEITEM_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table SUPPLIERS
--------------------------------------------------------

  ALTER TABLE "CHINMAY"."SUPPLIERS" ADD CONSTRAINT "SUPPLIER_ID_PK" PRIMARY KEY ("SUPPLIER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY"  ENABLE;
  ALTER TABLE "CHINMAY"."SUPPLIERS" MODIFY ("SUPPLIER_PHONE_NO" NOT NULL ENABLE);
  ALTER TABLE "CHINMAY"."SUPPLIERS" MODIFY ("SUPPLIER_NAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PURCHASEITEM
--------------------------------------------------------

  ALTER TABLE "CHINMAY"."PURCHASEITEM" ADD CONSTRAINT "PI_PURCHITEM_ID_PK" PRIMARY KEY ("PI_PURCHITEM_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table SALESORDERS
--------------------------------------------------------

  ALTER TABLE "CHINMAY"."SALESORDERS" ADD CONSTRAINT "PAYMENT_STATUS_CONSTRAINT" CHECK (payment_status IN('PAID','UNPAID')) ENABLE;
  ALTER TABLE "CHINMAY"."SALESORDERS" ADD CONSTRAINT "ORDER_STATUS_CONSTRAINT" CHECK (order_status IN('PROCESSED','OUT FOR DELIVERY')) ENABLE;
  ALTER TABLE "CHINMAY"."SALESORDERS" ADD CONSTRAINT "SALESORD_ID_PK" PRIMARY KEY ("SALESORD_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PRODUCTS
--------------------------------------------------------

  ALTER TABLE "CHINMAY"."PRODUCTS" ADD CONSTRAINT "PRODUCT_ID_PK" PRIMARY KEY ("PRODUCT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY"  ENABLE;
  ALTER TABLE "CHINMAY"."PRODUCTS" MODIFY ("PRODUCT_PRICE" NOT NULL ENABLE);
  ALTER TABLE "CHINMAY"."PRODUCTS" MODIFY ("PRODUCT_NAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table USERS
--------------------------------------------------------

  ALTER TABLE "CHINMAY"."USERS" ADD CONSTRAINT "ROLE_ID_CONSTRAINT" CHECK (role_id IN(1,2,3)) ENABLE;
  ALTER TABLE "CHINMAY"."USERS" ADD CONSTRAINT "USER_ID_PK" PRIMARY KEY ("USER_ID", "USERNAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY"  ENABLE;
  ALTER TABLE "CHINMAY"."USERS" MODIFY ("ROLE_ID" NOT NULL ENABLE);
  ALTER TABLE "CHINMAY"."USERS" MODIFY ("PASSWORD" NOT NULL ENABLE);
  ALTER TABLE "CHINMAY"."USERS" MODIFY ("USERNAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table INVENTORY
--------------------------------------------------------

  ALTER TABLE "CHINMAY"."INVENTORY" ADD CONSTRAINT "INV_PRODUCT_ID_PK" PRIMARY KEY ("INV_PRODUCT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY"  ENABLE;
  ALTER TABLE "CHINMAY"."INVENTORY" MODIFY ("PRODUCT_QUANTITY" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PURCHASEORDERS
--------------------------------------------------------

  ALTER TABLE "CHINMAY"."PURCHASEORDERS" ADD CONSTRAINT "PURCHASEORD_ID_PK" PRIMARY KEY ("PURCHASEORD_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "CHINMAY"  ENABLE;
  ALTER TABLE "CHINMAY"."PURCHASEORDERS" MODIFY ("PO_SUPPLIER_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Ref Constraints for Table INVENTORY
--------------------------------------------------------

  ALTER TABLE "CHINMAY"."INVENTORY" ADD CONSTRAINT "INV_PRODUCT_ID_FK" FOREIGN KEY ("INV_PRODUCT_ID")
	  REFERENCES "CHINMAY"."PRODUCTS" ("PRODUCT_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRODUCT_TYPE
--------------------------------------------------------

  ALTER TABLE "CHINMAY"."PRODUCT_TYPE" ADD CONSTRAINT "PT_PRODUCT_ID_FK" FOREIGN KEY ("PT_PRODUCT_ID")
	  REFERENCES "CHINMAY"."PRODUCTS" ("PRODUCT_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PURCHASEITEM
--------------------------------------------------------

  ALTER TABLE "CHINMAY"."PURCHASEITEM" ADD CONSTRAINT "PI_PRODUCT_ID_FK" FOREIGN KEY ("PI_PRODUCT_ID")
	  REFERENCES "CHINMAY"."PRODUCTS" ("PRODUCT_ID") ENABLE;
  ALTER TABLE "CHINMAY"."PURCHASEITEM" ADD CONSTRAINT "PI_PURCHASE_ID_FK" FOREIGN KEY ("PI_PURCHASE_ID")
	  REFERENCES "CHINMAY"."PURCHASEORDERS" ("PURCHASEORD_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PURCHASEORDERS
--------------------------------------------------------

  ALTER TABLE "CHINMAY"."PURCHASEORDERS" ADD CONSTRAINT "PO_SUPPLIER_ID_FK" FOREIGN KEY ("PO_SUPPLIER_ID")
	  REFERENCES "CHINMAY"."SUPPLIERS" ("SUPPLIER_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table SALESITEM
--------------------------------------------------------

  ALTER TABLE "CHINMAY"."SALESITEM" ADD CONSTRAINT "SI_ORDER_ID_FK" FOREIGN KEY ("SI_ORDER_ID")
	  REFERENCES "CHINMAY"."SALESORDERS" ("SALESORD_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "CHINMAY"."SALESITEM" ADD CONSTRAINT "SI_PRODUCT_ID_FK" FOREIGN KEY ("SI_PRODUCT_ID")
	  REFERENCES "CHINMAY"."PRODUCTS" ("PRODUCT_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table SALESORDERS
--------------------------------------------------------

  ALTER TABLE "CHINMAY"."SALESORDERS" ADD CONSTRAINT "SO_BUYER_ID_FK" FOREIGN KEY ("SO_BUYER_ID")
	  REFERENCES "CHINMAY"."BUYERS" ("BUYER_ID") ENABLE;
--------------------------------------------------------
--  DDL for Trigger BUYERS_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CHINMAY"."BUYERS_TRG" 
BEFORE INSERT ON BUYERS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.BUYER_ID IS NULL THEN
      SELECT BUYERS_SEQ.NEXTVAL INTO :NEW.BUYER_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "CHINMAY"."BUYERS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger INVEMP_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CHINMAY"."INVEMP_TRG" AFTER INSERT ON SALESITEM FOR EACH ROW 
BEGIN
  UPDATE INVENTORY
  SET INVENTORY.PRODUCT_QUANTITY = INVENTORY.PRODUCT_QUANTITY - :NEW.SI_QUANTITY
  WHERE INVENTORY.INV_PRODUCT_ID = :NEW.SI_PRODUCT_ID;
END;

/
ALTER TRIGGER "CHINMAY"."INVEMP_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger INVFILL_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CHINMAY"."INVFILL_TRG" AFTER INSERT ON PURCHASEITEM FOR EACH ROW 
BEGIN
  UPDATE INVENTORY
  SET INVENTORY.PRODUCT_QUANTITY = INVENTORY.PRODUCT_QUANTITY + :NEW.PI_QUANTITY
  WHERE INVENTORY.INV_PRODUCT_ID = :NEW.PI_PRODUCT_ID;
END;

/
ALTER TRIGGER "CHINMAY"."INVFILL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PRODUCTS_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CHINMAY"."PRODUCTS_TRG" 
BEFORE INSERT ON PRODUCTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PRODUCT_ID IS NULL THEN
      SELECT PRODUCTS_SEQ.NEXTVAL INTO :NEW.PRODUCT_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "CHINMAY"."PRODUCTS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PURCHASEITEM_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CHINMAY"."PURCHASEITEM_TRG" 
BEFORE INSERT ON PURCHASEITEM 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PI_PURCHITEM_ID IS NULL THEN
      SELECT PURCHASEITEM_SEQ.NEXTVAL INTO :NEW.PI_PURCHITEM_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "CHINMAY"."PURCHASEITEM_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PURCHASEORDERS_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CHINMAY"."PURCHASEORDERS_TRG" 
BEFORE INSERT ON PURCHASEORDERS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PURCHASEORD_ID IS NULL THEN
      SELECT PURCHASEORDERS_SEQ.NEXTVAL INTO :NEW.PURCHASEORD_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "CHINMAY"."PURCHASEORDERS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PURCHORDERCANCEL_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CHINMAY"."PURCHORDERCANCEL_TRG" BEFORE DELETE ON PURCHASEITEM FOR EACH ROW 
BEGIN
  UPDATE INVENTORY
  SET INVENTORY.PRODUCT_QUANTITY = INVENTORY.PRODUCT_QUANTITY - :OLD.PI_QUANTITY
  WHERE INVENTORY.INV_PRODUCT_ID = :OLD.PI_PRODUCT_ID;
END;

/
ALTER TRIGGER "CHINMAY"."PURCHORDERCANCEL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PURCH_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CHINMAY"."PURCH_TRG" AFTER INSERT ON PURCHASEITEM 
BEGIN
  UPDATE PURCHASEORDERS
  SET PURCHASEORDERS.PURCHPRICE = (SELECT  SUM(PURCHASEITEM.ITEM_TOTAL_PRICE)  FROM PURCHASEITEM  WHERE PURCHASEITEM.PI_PURCHASE_ID = PURCHASEORDERS.PURCHASEORD_ID AND PURCHASEITEM.PI_PURCHASE_ID = PURCHASEORDERS.PURCHASEORD_ID)
WHERE EXISTS( SELECT PURCHASEITEM.PI_PURCHASE_ID from PURCHASEITEM where PURCHASEITEM.PI_PURCHASE_ID = PURCHASEORDERS.PURCHASEORD_ID);
END;

/
ALTER TRIGGER "CHINMAY"."PURCH_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SALESITEM_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CHINMAY"."SALESITEM_TRG" 
BEFORE INSERT ON SALESITEM 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.SI_SALEITEM_ID IS NULL THEN
      SELECT SALESITEM_SEQ.NEXTVAL INTO :NEW.SI_SALEITEM_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "CHINMAY"."SALESITEM_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SALESORDERCANCEL_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CHINMAY"."SALESORDERCANCEL_TRG" BEFORE DELETE ON SALESITEM FOR EACH ROW 
BEGIN
  UPDATE INVENTORY
  SET INVENTORY.PRODUCT_QUANTITY = INVENTORY.PRODUCT_QUANTITY + :OLD.SI_QUANTITY
  WHERE INVENTORY.INV_PRODUCT_ID = :OLD.SI_PRODUCT_ID;
END;

/
ALTER TRIGGER "CHINMAY"."SALESORDERCANCEL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SALESORDERS_TRG1
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CHINMAY"."SALESORDERS_TRG1" 
BEFORE INSERT ON SALESORDERS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.SALESORD_ID IS NULL THEN
      SELECT SALESORDERS_SEQ1.NEXTVAL INTO :NEW.SALESORD_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "CHINMAY"."SALESORDERS_TRG1" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SALES_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CHINMAY"."SALES_TRG" AFTER INSERT OR UPDATE ON SALESITEM 
BEGIN
  UPDATE SALESORDERS
  SET SALESORDERS.SALEPRICE = (SELECT  SUM(SALESITEM.ITEM_TOTAL_PRICE)  FROM SALESITEM  WHERE SALESITEM.SI_ORDER_ID = SALESORDERS.SALESORD_ID AND SALESITEM.SI_ORDER_ID = SALESORDERS.SALESORD_ID)
WHERE EXISTS( SELECT SALESITEM.SI_ORDER_ID from SALESITEM where SALESITEM.SI_ORDER_ID = SALESORDERS.SALESORD_ID);
END;

/
ALTER TRIGGER "CHINMAY"."SALES_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SUPPLIERS_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CHINMAY"."SUPPLIERS_TRG" 
BEFORE INSERT ON SUPPLIERS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.SUPPLIER_ID IS NULL THEN
      SELECT SUPPLIERS_SEQ1.NEXTVAL INTO :NEW.SUPPLIER_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "CHINMAY"."SUPPLIERS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger USERS_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CHINMAY"."USERS_TRG" 
BEFORE INSERT ON USERS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.USER_ID IS NULL THEN
      SELECT USERS_SEQ.NEXTVAL INTO :NEW.USER_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "CHINMAY"."USERS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Procedure ADD_NEW_ORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CHINMAY"."ADD_NEW_ORDER" 
   (order_id_in IN NUMBER, sales_in IN NUMBER)
IS
   no_sales EXCEPTION;
BEGIN
   IF sales_in <= 0 THEN
      RAISE no_sales;
   ELSE
      INSERT INTO SALESITEM(SI_ORDER_ID,SI_QUANTITY)
      VALUES ( order_id_in, sales_in );
   END IF;
EXCEPTION
   WHEN no_sales THEN
      raise_application_error (-20001,'You must have sales in order to submit the order.');
   WHEN OTHERS THEN
      raise_application_error (-20002,'An error has occurred inserting an order.');
END ADD_NEW_ORDER;

/
--------------------------------------------------------
--  DDL for Procedure UNIT_PRICE_BASED_ON_MARGIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CHINMAY"."UNIT_PRICE_BASED_ON_MARGIN" (id IN INTEGER) AS 
BEGIN
UPDATE SALESITEM SI
SET SI.SI_DISCOUNTED_PRICE = (SELECT SI.SI_UNIT_PRICE * SI.SI_QUANTITY - (SI.SI_UNIT_PRICE  * PT.MARGIN_PER/100) FROM PRODUCT_TYPE PT WHERE PT.PT_PRODUCT_ID = SI.SI_PRODUCT_ID)
WHERE SI.SI_PRODUCT_ID = id;
END UNIT_PRICE_BASED_ON_MARGIN;

/
